on: push

jobs:
  get-artifact-list:
    runs-on: ubuntu-latest
    steps:
      - name: get the list
        run: |
         git clone https://github.com/amshinde/kata-packaging
         echo $PWD
         ls
         ./kata-packaging/release/build-artifacts.sh > artifact-list.txt
         cat artifact-list.txt 
      - name: save-artifact-list
        uses: actions/upload-artifact@master
        with: 
          name: artifact-list 
          path: artifact-list.txt

  build-kernel:
    runs-on: ubuntu-16.04
    needs: get-artifact-list
    steps:
      - name: get-artifact-list
        uses: actions/download-artifact@master
        with:
          name: artifact-list
      - name: build-kernel
        run: |
         predicated_value="install_kernel"
         value=$(cat artifact-list/artifact-list.txt | grep $predicated_value)
         cat artifact-list/artifact-list.txt
         echo $value
         echo "top dir" $(pwd)
         # Do we want to do some grep on prior 3 lines?
         if [ "$value" == "$predicated_value" ]; then
           # install kernel dependencies
           sudo apt-get update && sudo apt install -y flex bison libelf-dev bc iptables
           export GOPATH=$HOME/go
           go get github.com/amshinde/kata-packaging || true
           pushd $GOPATH/src/github.com/amshinde/kata-packaging/release >>/dev/null
           echo "Current dir " $(pwd)
           # Get versions information
           echo "GITHUB_REF" $GITHUB_REF
           tag=`echo $GITHUB_REF | cut -d/ -f3-`
           ../obs-packaging/gen_versions_txt.sh $tag
           # Build the kernel:
           source ./kata-deploy-binaries.sh
           install_kernel
           echo "Current dir after build" $(pwd)
           echo "Contents of dir after build" $(ls -la)
           echo ::set-env name=artifact-built::true
           popd >>/dev/null
           echo "Changed into top dir" $(pwd)
           mv $HOME/go/src/github.com/amshinde/kata-packaging/release/kata-kernel.tar.gz .
         else
           echo ::set-env name=artifact-built::false
         fi
      - name: store-artifacts
        if: env.artifact-built == 'true' 
        uses: actions/upload-artifact@master
        with: 
          name: kata-artifacts
          path: kata-kernel.tar.gz

  # Job for building the QEMU binaries
  build-qemu:
    runs-on: ubuntu-16.04
    needs: get-artifact-list
    steps:
      - name: get-artifact-list
        uses: actions/download-artifact@master
        with:
          name: artifact-list
      - name: build-qemu
        run: |
         predicated_value="install_qemu"
         value=$(cat artifact-list/artifact-list.txt | grep $predicated_value)
         cat artifact-list/artifact-list.txt
         echo $value
         # Do we want to do some grep on prior 3 lines?
         if [ "$value" == "$predicated_value" ]; then  
           export GOPATH=$HOME/go
           go get github.com/amshinde/kata-packaging || true
           pushd $GOPATH/src/github.com/amshinde/kata-packaging/release >>/dev/null
           # Get versions information
           echo "GITHUB_REF" $GITHUB_REF
           tag=`echo $GITHUB_REF | cut -d/ -f3-`
           ../obs-packaging/gen_versions_txt.sh $tag
           # Build the VMM:
           source ./kata-deploy-binaries.sh
           install_qemu
           echo ::set-env name=artifact-built::true
           popd >>/dev/null
           echo "final GOPATH" $GOPATH
           mv $HOME/go/src/github.com/amshinde/kata-packaging/release/kata-qemu-static.tar.gz .
         else
           echo ::set-env name=artifact-built::false
         fi
      - name: store-artifacts
        if: env.artifact-built == 'true' 
        uses: actions/upload-artifact@master
        with: 
          name: kata-artifacts
          path: kata-qemu-static.tar.gz
  gather-artifacts:
    runs-on: ubuntu-16.04
    needs: [build-kernel, build-qemu]
    steps:
      - name: get-artifacts
        uses: actions/download-artifact@master
        with:
          name: kata-artifacts
      - name: colate-artifacts
        run: |
          ls -la
          export GOPATH=$HOME/go
          go get github.com/amshinde/kata-packaging || true
          pushd $GOPATH/src/github.com/amshinde/kata-packaging/release >>/dev/null
          # Get versions information
          #tag=`echo $GITHUB_REF | cut -d/ -f3-`
          popd >>/dev/null
          tag="1.9.0-rc0"
          tarball_name="kata-static-$tag-x86_64.tar.xz"
          pushd kata-artifacts >>/dev/null 
          for c in `ls` do; 
                echo "untarring tarball $c"
                tar -xvf $c
          done
          ls ./opt/kata/bin
          ls ./opt/kata/share
          tar cfJ "../${tarball_name}" "./opt"
          popd >>/dev/null
          ls -l && ls kata-artifacts
